buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.6.4"
        classpath "gradle.plugin.com.craigburke.gradle:karma-gradle:1.4.3"
        classpath "gradle.plugin.com.craigburke.gradle:bower-installer-gradle:2.5.1"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.8.2"
        classpath "org.grails.plugins:views-gradle:1.0.12"
    }
}

version "0.9.7.9.2"
group "webpoint3"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"asset-pipeline"
//apply plugin:"maven"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.grails-gsp"
apply plugin:"com.craigburke.karma"
apply plugin:"com.craigburke.bower-installer"
apply plugin:"org.grails.plugins.views-json"

ext {
    grailsVersion = project.grailsVersion
    gradleWrapperVersion = project.gradleWrapperVersion
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    assets "com.craigburke.angular:angular-template-asset-pipeline:2.2.6"
    assets "com.craigburke.angular:angular-annotate-asset-pipeline:2.4.0"
    assets "com.craigburke:js-closure-wrap-asset-pipeline:1.2.0"

    compile "org.springframework.boot:spring-boot-starter-logging"

    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"

    // Use Jetty
    //compile "org.springframework.boot:spring-boot-starter-jetty"

    compile "org.grails.plugins:spring-security-core:$springSecurityCoreVersion"
    compile "org.grails.plugins:spring-security-rest:$springSecurityRestVersion"
    compile "org.grails.plugins:spring-security-rest-gorm:$springSecurityRestVersion"

    // Apache Camel
    compile "org.apache.camel:camel-core:2.18.3"  // 2.15.3 2.18.3 2.19.0
    compile "org.apache.camel:camel-spring-boot:2.18.3"
    compile "org.apache.camel:camel-twitter:2.18.3"
    compile "org.apache.camel:camel-stream:2.18.3"

//    compile "org.apache.camel:camel-groovy:2.15.3"
//    compile "org.apache.activemq:activemq-camel:5.14.4"  // 5.11.1
//    runtime "org.apache.camel:camel-stream:2.15.3"
//    runtime "org.apache.camel:camel-netty:2.15.3"
//    runtime "org.apache.camel:camel-netty4:2.15.3"
//    runtime "org.apache.camel:camel-spring:2.15.3"
//    runtime "org.apache.camel:camel-jms:2.15.3"
//    runtime "org.apache.activemq:activemq-pool:5.11.1"

    compile "org.grails.plugins:grails-spring-websocket:2.3.0"
    compile "org.imgscalr:imgscalr-lib:4.2"

    compile "org.grails:grails-core"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-codecs"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-datasource"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-async"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails.plugins:cache"
    compile "org.grails:grails-plugin-gsp"
    compile "org.grails.plugins:mongodb"
    compile "org.grails.plugins:views-json"


    console "org.grails:grails-console"

    profile "org.grails.profiles:angular"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.8.2"

    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"
    testCompile "org.grails:grails-datastore-rest-client"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
}
bower {
    'angular'('1.5.x') {
        source 'angular.min.js'
    }
    'angular-resource'('1.5.x') {
        source 'angular-resource.min.js' >> '/angular/'
    }
    'angular-route'('1.5.x') {
        source 'angular-route.min.js' >> '/angular/'
    }
    'angular-sanitize'('1.5.x') {
        source 'angular-sanitize.min.js' >> '/angular/'
    }
    'angular-animate'('1.5.x') {
        source 'angular-animate.min.js' >> '/angular/'
    }
    'angular-aria'('1.5.x') {
        source 'angular-aria.min.js' >> '/angular/'
    }
    'angular-mocks'('1.5.x') {
        source 'angular-mocks.js' >> '/angular/'
    }
    'angular-messages'('1.5.x') {
        source 'angular-messages.min.js' >> '/angular/'
    }
//    'angular-websocket'('2.0.x') {
//        source 'dist/angular-websocket.js' >> '/angular-websocket/'
//    }
    'ng-stomp'('0.x.x') {
        source 'dist/ng-stomp.standalone.min.js' >> '/ng-stomp/'
    }
    'angular-http-auth'('1.5.x') {
        source 'dist/http-auth-interceptor.min.js' >> '/angular-http-auth/'
    }
    'angular-bootstrap'('2.0.x') {
        source 'ui-bootstrap-tpls.min.js' >> '/angular-bootstrap/'
    }
    'bootstrap'('3.x.x') {
        source 'dist/css/bootstrap.css' >> '/bootstrap/css/'
        source 'dist/css/bootstrap.css.map' >> '/bootstrap/css/'
        source 'dist/fonts/**' >> '/bootstrap/fonts/'
    }
    'ng-file-upload'('12.2.x') {
        source 'ng-file-upload.min.js' >> '/ng-modules/'
    }
//    'angular-cookies'('1.4.x') {
//        source 'angular-cookies.js' >> '/angular/'
//    }
    'angular-local-storage'('0.5.x') {
        source 'dist/angular-local-storage.min.js' >> '/angular/'
    }
//    'ngStorage'('0.3.x') {
//        source 'ngStorage.js' >> '/angular/'
//    }
    'angular-spinner'('0.8.x') {
        source 'angular-spinner.min.js' >> '/angular/'
    }
    'spin.js'('2.x.x') {
        source 'spin.min.js' >> '/spin.js/'
    }
    'angular-material'('1.1.x') {
        source 'angular-material.min.js' >> '/angular-material/'
        source 'angular-material.css' >> '/angular-material/'
    }
    'material-design-icons'('2.2.x') {
        source 'iconfont/**' >> '/material-design-icons/iconfont/'
    }
}

karma {
    dependencies(['karma-wrap-preprocessor'])

    profile 'angularJS'

    preprocessors = [
        'grails-app/assets/javascripts/**/*.js': ['wrap']
    ]

    wrapPreprocessor = [
        template: "(function () { 'use strict';  <%= contents %> })()"
    ]
}

assets {
    minifyJs = true
    minifyCss = true
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    systemProperties = System.properties
}

processResources {
    filesMatching("**/*.yml") {
        expand(MONGO_WEBPOINT_HOST: MONGO_WEBPOINT_HOST, MONGO_WEBPOINT_USER: MONGO_WEBPOINT_USER,
                MONGO_WEBPOINT_PASS: MONGO_WEBPOINT_PASS,
                TWITTER_CONSUMER_KEY: TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET: TWITTER_CONSUMER_SECRET,
                TWITTER_ACCESS_TOKEN: TWITTER_ACCESS_TOKEN, TWITTER_ACCESS_TOKEN_SECRET: TWITTER_ACCESS_TOKEN_SECRET
        )
    }
}

grails {
    println 'webpoint3'

}

//springBoot{
//    // Enable the creation of a fully
//    // executable archive file.
//    executable = true
//    // Set values for variable placeholders
//    // in the default launch script.
//    embeddedLaunchScriptProperties =
//            [initInfoDescription: project.description,
//             initInfoShortDescription: project.name,
//             initInfoProvides: jar.baseName,
//             mode: 'service']
//}

//bootRepackage.classifier = 'app'
//bootRepackage.withJarTask = jar